
Project contains below files and directories :

1.Directory: "gen-java", contains java files generated by "fileservice.thrift" IDL file.

2.Directory: "src", contains client,server and server handler classes ,below are the details :
 
 1.FileStoreServer.java:
 > It has the main method that start server , it uses FileStoreHandler class to process client RPC requests.

 2.FileStoreHandler.java
 > Its a handler class which implements FileStore.Iface interface created by Thrift.
 > This is the actual which implements "writeFile" , "readFile", and "listOwnedfiles" methods.

 3.FileStoreClient.java
 > It has client main method which calls the remote methods that we implemented in above server side classes.
 > Also writes the return output in JSON format using TIOStreamTransport and TJSONProtocol.

3.makefile:
 > compiles the src code ,that will be used by client.sh and server.sh bash scripts.

4.server.sh:
 >Bash script which takes PORTNUMBER as argument and starts the server calling FileStoreServer main method.

5.client.sh:
 >Bash script which takes HOSTNAME PORTNUMBER OPERATION FILENAME(optional) USER as arguments and calls FileStoreClient main method to make RPC calls.
 
How to Run:

step 1:  Extract amalles1-project1.tar.gz and go to directory amalles1-project1
step 2:  make
step 3:  ./server.sh PORTNUMBER 
step 4:  ./client.sh HOSTNAME PORTNUMBER --operation [OPERATION] --filename [FILENAME] --user [OWNER]


Sample Input/Output of above steps :

1. Starting SERVER sample:

amalles1@remote03:~/ds/amalles1-project1$ ./server.sh 9099
Starting the FileStore server...

2. Calling WRITE Operation through client sample:

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation write --filename file1 --user amalles1
{"1":{"i32":1}}

3. READ Operation sample:

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation read --filename file1 --user amalles1
{"1":{"rec":{"1":{"str":"file1"},"2":{"i64":1475770351000},"3":{"i64":1475770351000},"4":{"i32":0},"5":{"str":"amalles1"},"6":{"i32":28},"7":{"str":"9f05c59618fceee646c6cbce61ce3bb6"}}},"2":{"str":"This is file one reporting.\n"}}

4. LIST Operation sample:

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation list --user amalles1
["rec",1,{"1":{"str":"file1"},"2":{"i64":1475770351000},"3":{"i64":1475770351000},"4":{"i32":0},"5":{"str":"amalles1"},"6":{"i32":28},"7":{"str":"9f05c59618fceee646c6cbce61ce3bb6"}}]

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation write --filename file1 --user amalles1
{"1":{"i32":1}}

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation write --filename file2 --user amalles1
{"1":{"i32":1}}

5. LIST Operation for 2 records :
amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation list --user amalles1
["rec",2,{"1":{"str":"file1"},"2":{"i64":1475770431000},"3":{"i64":1475770431000},"4":{"i32":1},"5":{"str":"amalles1"},"6":{"i32":28},"7":{"str":"9f05c59618fceee646c6cbce61ce3bb6"}},{"1":{"str":"file2"},"2":{"i64":1475770437000},"3":{"i64":1475770437000},"4":{"i32":0},"5":{"str":"amalles1"},"6":{"i32":18},"7":{"str":"64b0d435c5473c2b7be2b7aa18efe8d8"}}]

6. USER does not exist case :
amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote03.cs.binghamton.edu 9099 --operation list --user nonexist
{"1":{"str":"User nonexist does not exist"}}

7. WRITE Operation with same filenames but different OWNER :

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote07.cs.binghamton.edu 9099 --operation write --user owner2 --filename input2
{"1":{"i32":1}}

amalles1@remote01:~/ds/amalles1-project1$ ./client.sh remote07.cs.binghamton.edu 9099 --operation write --user owner1 --filename input2
{"1":{"i32":1}}

